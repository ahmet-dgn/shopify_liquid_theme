{% assign main_menu_linklist = linklists[section.settings.menu].links %}

<script>
  window.Components = window.Components ?? {};
  window.Components['tabs'] = (function anonymous() {
    return function tabs() {
      return {
        selectedIndex: 0,
        onTabClick(event) {
          if (!this.$el.contains(event.detail)) return;

          let tabs = Array.from(this.$el.querySelectorAll('[x-data^="Components.tab("]'));
          let panels = Array.from(this.$el.querySelectorAll('[x-data^="Components.tabPanel("]'));

          let idx = tabs.indexOf(event.detail);
          this.selectedIndex = idx;

          window.dispatchEvent(
            new CustomEvent('tab-select', {
              detail: {
                tab: event.detail,
                panel: panels[idx],
              },
            })
          );
        },
        onTabKeydown(event) {
          if (!this.$el.contains(event.detail.tab)) return;

          let tabs = Array.from(this.$el.querySelectorAll('[x-data^="Components.tab("]'));
          let tabIndex = tabs.indexOf(event.detail.tab);

          if (event.detail.key === 'ArrowLeft') {
            this.onTabClick({ detail: tabs[(tabIndex - 1 + tabs.length) % tabs.length] });
          } else if (event.detail.key === 'ArrowRight') {
            this.onTabClick({ detail: tabs[(tabIndex + 1) % tabs.length] });
          } else if (event.detail.key === 'Home' || event.detail.key === 'PageUp') {
            this.onTabClick({ detail: tabs[0] });
          } else if (event.detail.key === 'End' || event.detail.key === 'PageDown') {
            this.onTabClick({ detail: tabs[tabs.length - 1] });
          }
        },
      };
    };
  })();
  window.Components = window.Components ?? {};
  window.Components['tab'] = (function anonymous() {
    return function tab(defaultIndex = 0) {
      return {
        selected: false,
        init() {
          let tabs = Array.from(
            this.$el.closest('[x-data^="Components.tabs("]').querySelectorAll('[x-data^="Components.tab("]')
          );
          this.selected = tabs.indexOf(this.$el) === defaultIndex;
          this.$watch('selected', (selected) => {
            if (selected) {
              this.$el.focus();
            }
          });
        },
        onClick() {
          window.dispatchEvent(
            new CustomEvent('tab-click', {
              detail: this.$el,
            })
          );
        },
        onKeydown(event) {
          if (['ArrowLeft', 'ArrowRight', 'Home', 'PageUp', 'End', 'PageDown'].includes(event.key)) {
            event.preventDefault();
          }

          window.dispatchEvent(
            new CustomEvent('tab-keydown', {
              detail: {
                tab: this.$el,
                key: event.key,
              },
            })
          );
        },
        onTabSelect(event) {
          this.selected = event.detail.tab === this.$el;
        },
      };
    };
  })();
  window.Components = window.Components ?? {};
  window.Components['tab'] = (function anonymous() {
    return function tab(defaultIndex = 0) {
      return {
        selected: false,
        init() {
          let tabs = Array.from(
            this.$el.closest('[x-data^="Components.tabs("]').querySelectorAll('[x-data^="Components.tab("]')
          );
          this.selected = tabs.indexOf(this.$el) === defaultIndex;
          this.$watch('selected', (selected) => {
            if (selected) {
              this.$el.focus();
            }
          });
        },
        onClick() {
          window.dispatchEvent(
            new CustomEvent('tab-click', {
              detail: this.$el,
            })
          );
        },
        onKeydown(event) {
          if (['ArrowLeft', 'ArrowRight', 'Home', 'PageUp', 'End', 'PageDown'].includes(event.key)) {
            event.preventDefault();
          }

          window.dispatchEvent(
            new CustomEvent('tab-keydown', {
              detail: {
                tab: this.$el,
                key: event.key,
              },
            })
          );
        },
        onTabSelect(event) {
          this.selected = event.detail.tab === this.$el;
        },
      };
    };
  })();
  window.Components = window.Components ?? {};
  window.Components['tabPanel'] = (function anonymous() {
    return function tabPanel(defaultIndex = 0) {
      return {
        selected: false,
        init() {
          let panels = Array.from(
            this.$el.closest('[x-data^="Components.tabs("]').querySelectorAll('[x-data^="Components.tabPanel("]')
          );
          this.selected = panels.indexOf(this.$el) === defaultIndex;
        },
        onTabSelect(event) {
          this.selected = event.detail.panel === this.$el;
        },
      };
    };
  })();
  window.Components = window.Components ?? {};
  window.Components['tabPanel'] = (function anonymous() {
    return function tabPanel(defaultIndex = 0) {
      return {
        selected: false,
        init() {
          let panels = Array.from(
            this.$el.closest('[x-data^="Components.tabs("]').querySelectorAll('[x-data^="Components.tabPanel("]')
          );
          this.selected = panels.indexOf(this.$el) === defaultIndex;
        },
        onTabSelect(event) {
          this.selected = event.detail.panel === this.$el;
        },
      };
    };
  })();
  window.Components = window.Components ?? {};
  window.Components['popoverGroup'] = (function anonymous() {
    return function popoverGroup() {
      return {
        __type: 'popoverGroup',
        init() {
          let handler = (e) => {
            if (!document.body.contains(this.$el)) {
              window.removeEventListener('focus', handler, true);
              return;
            }
            if (e.target instanceof Element && !this.$el.contains(e.target)) {
              window.dispatchEvent(
                new CustomEvent('close-popover-group', {
                  detail: this.$el,
                })
              );
            }
          };
          window.addEventListener('focus', handler, true);
        },
      };
    };
  })();
  window.Components = window.Components ?? {};
  window.Components['popover'] = (function anonymous() {
    return function popover({ open = false, focus = false } = {}) {
      const focusableSelector = [
        '[contentEditable=true]',
        '[tabindex]',
        'a[href]',
        'area[href]',
        'button:not([disabled])',
        'iframe',
        'input:not([disabled])',
        'select:not([disabled])',
        'textarea:not([disabled])',
      ]
        .map((selector) => `${selector}:not([tabindex='-1'])`)
        .join(',');

      function focusFirst(container) {
        const focusableElements = Array.from(container.querySelectorAll(focusableSelector));

        function tryFocus(element) {
          if (element === undefined) return;

          element.focus({ preventScroll: true });

          if (document.activeElement !== element) {
            tryFocus(focusableElements[focusableElements.indexOf(element) + 1]);
          }
        }

        tryFocus(focusableElements[0]);
      }

      return {
        __type: 'popover',
        open,
        init() {
          if (focus) {
            this.$watch('open', (open) => {
              if (open) {
                this.$nextTick(() => {
                  focusFirst(this.$refs.panel);
                });
              }
            });
          }

          let handler = (e) => {
            if (!document.body.contains(this.$el)) {
              window.removeEventListener('focus', handler, true);
              return;
            }
            let ref = focus ? this.$refs.panel : this.$el;
            if (this.open && e.target instanceof Element && !ref.contains(e.target)) {
              let node = this.$el;
              while (node.parentNode) {
                node = node.parentNode;
                if (node.__x instanceof this.constructor) {
                  if (node.__x.$data.__type === 'popoverGroup') return;
                  if (node.__x.$data.__type === 'popover') break;
                }
              }
              this.open = false;
            }
          };

          window.addEventListener('focus', handler, true);
        },
        onEscape() {
          this.open = false;
          if (this.restoreEl) {
            this.restoreEl.focus();
          }
        },
        onClosePopoverGroup(e) {
          if (e.detail.contains(this.$el)) {
            this.open = false;
          }
        },
        toggle(e) {
          this.open = !this.open;
          if (this.open) {
            this.restoreEl = e.currentTarget;
          } else if (this.restoreEl) {
            this.restoreEl.focus();
          }
        },
      };
    };
  })();
  window.Components = window.Components ?? {};
  window.Components['popover'] = (function anonymous() {
    return function popover({ open = false, focus = false } = {}) {
      const focusableSelector = [
        '[contentEditable=true]',
        '[tabindex]',
        'a[href]',
        'area[href]',
        'button:not([disabled])',
        'iframe',
        'input:not([disabled])',
        'select:not([disabled])',
        'textarea:not([disabled])',
      ]
        .map((selector) => `${selector}:not([tabindex='-1'])`)
        .join(',');

      function focusFirst(container) {
        const focusableElements = Array.from(container.querySelectorAll(focusableSelector));

        function tryFocus(element) {
          if (element === undefined) return;

          element.focus({ preventScroll: true });

          if (document.activeElement !== element) {
            tryFocus(focusableElements[focusableElements.indexOf(element) + 1]);
          }
        }

        tryFocus(focusableElements[0]);
      }

      return {
        __type: 'popover',
        open,
        init() {
          if (focus) {
            this.$watch('open', (open) => {
              if (open) {
                this.$nextTick(() => {
                  focusFirst(this.$refs.panel);
                });
              }
            });
          }

          let handler = (e) => {
            if (!document.body.contains(this.$el)) {
              window.removeEventListener('focus', handler, true);
              return;
            }
            let ref = focus ? this.$refs.panel : this.$el;
            if (this.open && e.target instanceof Element && !ref.contains(e.target)) {
              let node = this.$el;
              while (node.parentNode) {
                node = node.parentNode;
                if (node.__x instanceof this.constructor) {
                  if (node.__x.$data.__type === 'popoverGroup') return;
                  if (node.__x.$data.__type === 'popover') break;
                }
              }
              this.open = false;
            }
          };

          window.addEventListener('focus', handler, true);
        },
        onEscape() {
          this.open = false;
          if (this.restoreEl) {
            this.restoreEl.focus();
          }
        },
        onClosePopoverGroup(e) {
          if (e.detail.contains(this.$el)) {
            this.open = false;
          }
        },
        toggle(e) {
          this.open = !this.open;
          if (this.open) {
            this.restoreEl = e.currentTarget;
          } else if (this.restoreEl) {
            this.restoreEl.focus();
          }
        },
      };
    };
  })();
</script>
<div x-data="{searchBarOpen: false }" class="bg-white relative" x-cloak>
  <div
    x-transition:enter="transition-opacity ease-linear duration-300"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition-opacity ease-linear duration-300"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
    x-show="searchBarOpen"
    class="w-full bg-white/95 absolute top-0 left-0 h-40 z-50 shadow flex justify-center items-center px-4 "
    @click.away="searchBarOpen = false"
  >
    <div class="w-full max-w-lg lg:max-w-lg mx-auto">
      <label for="search" class="sr-only">Search</label>
      <div class="relative">
        <form action="{{ routes.search_url }}" method="get">
          <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
            <svg class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd" />
            </svg>
          </div>
          <input
            name="q"
            class="block w-full rounded-md border-0 bg-white py-1.5 pl-10 pr-3 text-gray-900 ring-1 ring-inset h-12 ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
            placeholder="Search"
            type="search"
          >
          <button
            type="submit"
            class="py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded-e-md border border-transparent bg-gray-900 text-white hover:bg-gray-700 disabled:opacity-50 disabled:pointer-events-none  absolute inset-y-0 right-0"
          >
            Search
          </button>
        </form>
      </div>
    </div>
    <button
      type="button"
      x-on:click="searchBarOpen = false"
      class="absolute top-2 right-2 lg:top-5 lg:right-5  group"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        class="w-6 h-6 group-hover:rotate-90 text-gray-500"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
      </svg>
    </button>
  </div>
  <div x-data="{ open: false }" @keydown.window.escape="open = false" class="bg-white" x-cloak>
    <!-- Mobile menu start -->

    <div
      x-show="open"
      class="relative z-40 lg:hidden "
      x-ref="dialog"
      aria-modal="true"
      style="display: none;"
    >
      <div
        x-show="open"
        x-transition:enter="transition-opacity ease-linear duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition-opacity ease-linear duration-300"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"

        class="fixed inset-0 bg-black bg-opacity-25"
        style="display: none;"
      ></div>

      <div class="fixed inset-0 z-40 flex">
        <div
          x-show="open"
          x-transition:enter="transition ease-in-out duration-300 transform"
          x-transition:enter-start="-translate-x-full"
          x-transition:enter-end="translate-x-0"
          x-transition:leave="transition ease-in-out duration-300 transform"
          x-transition:leave-start="translate-x-0"
          x-transition:leave-end="-translate-x-full"
          x-description="Off-canvas menu, show/hide based on off-canvas menu state."
          class="relative flex w-full max-w-xs flex-col overflow-y-auto bg-white pb-12 shadow-xl"
          @click.away="open = false"
          style="display: none;"
        >
          <div class="flex px-4 pb-2 pt-5">
            <button
              type="button"
              class="-m-2 inline-flex items-center justify-center rounded-md p-2 text-gray-400"
              @click="open = false"
            >
              <span class="sr-only">Close menu</span>
              <svg
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          <!-- Links -->

          <div class="space-y-6  px-4 py-6">
            {% for link in main_menu_linklist %}
              {% if link.links != blank %}
                <div x-data="{ mobileDropDown: false }" class="relative" x-cloak>
                  <div class="flex justify-between " @click="mobileDropDown = !mobileDropDown">
                    <button class="font-medium text-gray-900 block">{{ link.title }}</button>
                    <svg
                      :class=" mobileDropDown && '-rotate-90' "
                      class="h-5 w-5 text-gray-500 "
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      aria-hidden="true"
                    >
                      <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
                    </svg>
                  </div>
                  <ul
                    x-transition:enter="transition-opacity ease-linear duration-300"
                    x-transition:enter-start="opacity-0"
                    x-transition:enter-end="opacity-100"
                    x-transition:leave="transition-opacity ease-linear duration-300"
                    x-transition:leave-start="opacity-100"
                    x-transition:leave-end="opacity-0"
                    x-show="mobileDropDown"
                    role="list"
                    aria-labelledby="mobile-featured-heading-0"
                    class="mt-4 ml-2 pl-2 space-y-4 border-l border-gray-300"
                  >
                    {% for childlink in link.links %}
                      <li class="flex">
                        <a href="{{ childlink.url }}" class="text-gray-500 text-sm"> {{ childlink.title }}</a>
                      </li>
                    {% endfor %}
                  </ul>
                </div>
              {% else %}
                <div class="flow-root">
                  <a href="{{ link.url }}" class="-m-2 block p-2 font-medium text-gray-900">{{ link.title }}</a>
                </div>
              {% endif -%}
            {% endfor %}
          </div>
          <div class="space-y-6 border-t border-gray-200 px-4 py-6">
            {% if shop.customer_accounts_enabled %}
              {% if customer %}
                <div class="flow-root">
                  <a href="{{ routes.account_url}}" class="-m-2 block p-2 font-medium text-gray-900">
                    Go to your account</a
                  >
                </div>
                <div class="flow-root">
                  <a href="{{ routes.account_logout_url}}" class="-m-2 block p-2 font-medium text-gray-900"> Log out</a>
                </div>
              {% else %}
                <div class="flow-root">
                  <a href="{{ routes.account_login_url}}" class="-m-2 block p-2 font-medium text-gray-900">Sign in</a>
                </div>
                <div class="flow-root">
                  <a href="{{ routes.account_register_url }}" class="-m-2 block p-2 font-medium text-gray-900"
                    >Create an account</a
                  >
                </div>
              {% endif %}
            {% endif %}
          </div>
        </div>
      </div>
    </div>
    <!-- Mobile menu end -->
    <!-- Desktop menu start -->
    <header class="relative">
      <nav aria-label="Top">
        <!-- Secondary navigation -->
        <div class="bg-white">
          <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div class="border-b border-gray-200">
              <div class="flex h-24 items-center justify-between">
                <!-- Logo (lg+) -->
                <div class="hidden lg:flex lg:items-center">
                  <a
                    href="
                      {{ routes.root_url
                      }}
                    "
                  >
                    <span class="sr-only">{{ shop.name }}</span>
                    <img
                      src="{{ shop.brand.logo | image_url: width:300, height:96}}"
                      alt="{{shop.name  }}"
                      class="h-auto w-auto object-contain"
                      width="300"
                      height="96"
                    >
                  </a>
                </div>
                <div class="hidden h-full lg:flex">
                  <!-- Mega menus -->

                  <div class="ml-16" x-data="Components.popoverGroup()" x-init="init()" x-cloak>
                    <div class="flex h-full justify-center space-x-8">
                      {% for link in main_menu_linklist %}
                        {% if link.links != blank %}
                          <div
                            class="flex"
                            x-data="Components.popover({ open: false, focus: false })"
                            x-init="init()"
                            @keydown.escape="onEscape"
                            @close-popover-group.window="onClosePopoverGroup"
                            x-cloak
                          >
                            <div class="relative flex justify-center items-center">
                              <button
                                type="button"
                                x-state:on="Item active"
                                x-state:off="Item inactive"
                                class="relative z-10 -mb-px flex items-center border-b-2 pt-px text-sm font-medium transition-colors duration-200 ease-out border-transparent text-gray-700 hover:text-gray-800"
                                :class="{ 'border-indigo-600 text-indigo-600': open, 'border-transparent text-gray-700 hover:text-gray-800': !(open) }"
                                @click="toggle"
                                @mousedown="if (open) $event.preventDefault()"
                                aria-expanded="false"
                                :aria-expanded="open.toString()"
                              >
                                {{ link.title }}
                              </button>
                              <svg
                                :class=" open && '-rotate-90' "
                                class="h-5 w-5 text-gray-500 "
                                viewBox="0 0 20 20"
                                fill="currentColor"
                                aria-hidden="true"
                              >
                                <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path>
                              </svg>
                            </div>
                            <div
                              x-show="open"
                              x-transition:enter="transition ease-out duration-200"
                              x-transition:enter-start="opacity-0"
                              x-transition:enter-end="opacity-100"
                              x-transition:leave="transition ease-in duration-150"
                              x-transition:leave-start="opacity-100"
                              x-transition:leave-end="opacity-0"
                              class="absolute  top-full text-gray-500 sm:text-sm z-40"
                              x-ref="panel"
                              @click.away="open = false"
                              style="display: none;"
                            >
                              <div class=" bg-white w-64 rounded shadow-lg">
                                <div class="p-4">
                                  <div>
                                    <ul
                                      role="list"
                                      aria-labelledby="desktop-categories-heading"
                                      class=" space-y-6  sm:space-y-4 "
                                    >
                                      {% for childlink in link.links %}
                                        <li class="flex">
                                          <a href="{{ childlink.url }}" class="hover:text-gray-800">
                                            {{ childlink.title -}}
                                          </a>
                                        </li>
                                      {% endfor %}
                                    </ul>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        {% else %}
                          <a
                            href="{{ link.url }}"
                            class="flex items-center text-sm font-medium text-gray-700 hover:text-gray-800"
                          >
                            {{- link.title -}}
                          </a>
                        {% endif %}
                      {% endfor %}
                    </div>
                  </div>
                </div>

                <!-- Mobile menu and search (lg-) -->
                <div class="flex flex-1 items-center lg:hidden">
                  <button
                    type="button"
                    x-description="Mobile menu toggle, controls the 'mobileMenuOpen' state."
                    class="-ml-2 rounded-md bg-white p-2 text-gray-400"
                    @click="open = true"
                  >
                    <span class="sr-only">Open menu</span>
                    <svg
                      class="h-6 w-6"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="1.5"
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
                    </svg>
                  </button>

                  <!-- Search -->
                  <button
                    x-on:click="searchBarOpen = true"
                    type="button"
                    class="ml-2 p-2 text-gray-400 hover:text-gray-500"
                  >
                    <span class="sr-only">Search</span>
                    <svg
                      class="h-6 w-6"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke-width="1.5"
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path>
                    </svg>
                  </button>
                </div>

                <!-- Logo (lg-) -->

                <a
                  href="
                    {{ routes.root_url
                    }}
                  "
                >
                  <span class="sr-only">{{ shop.name }}</span>
                  <img
                    src="{{ shop.brand.logo | image_url: width:300, height:96}}"
                    alt="{{shop.name  }}"
                    class="lg:hidden flex-1 h-auto "
                    width="300"
                    height="96"
                  >
                </a>

                <div class="flex flex-1 items-center justify-end">
                  <div class="flex items-center lg:ml-8">
                    <div class="flex space-x-8">
                      <div class="hidden lg:flex">
                        <button
                          x-on:click="searchBarOpen = true"
                          type="button"
                          href="#"
                          class="-m-2 p-2 text-gray-400 hover:text-gray-500"
                        >
                          <span class="sr-only">Search</span>
                          <svg
                            class="h-6 w-6"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            aria-hidden="true"
                          >
                            <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path>
                          </svg>
                        </button>
                      </div>

                      <div class="flex gap-4">
                        {% if shop.customer_accounts_enabled %}
                          {% if customer %}
                            <div class="flow-root">
                              <a href="{{ routes.account_url}}" class="-m-2 block p-2 font-medium text-gray-900">
                                Your account</a
                              >
                            </div>
                            <div class="flow-root">
                              <a href="{{ routes.account_logout_url}}" class="-m-2 block p-2 font-medium text-gray-900">
                                Log out</a
                              >
                            </div>
                          {% else %}
                            <a href="{{ routes.account_login_url}}" class="-m-2 p-2 text-gray-400 hover:text-gray-500">
                              <span class="sr-only">Account</span>
                              <svg
                                class="h-6 w-6"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke-width="1.5"
                                stroke="currentColor"
                                aria-hidden="true"
                              >
                                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z"></path>
                              </svg>
                            </a>
                          {% endif %}
                        {% endif %}
                      </div>
                    </div>

                    <span class="mx-2 h-6 w-px bg-gray-200 lg:mx-6" aria-hidden="true"></span>

                    <div class="flow-root">
                      <a href="{{ routes.cart_url }}" class="group -m-2 flex items-center p-2 relative">
                        <svg
                          class="h-6 w-6 flex-shrink-0 text-gray-400 group-hover:text-gray-500"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke-width="1.5"
                          stroke="currentColor"
                          aria-hidden="true"
                        >
                          <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 00-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 00-16.536-1.84M7.5 14.25L5.106 5.272M6 20.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm12.75 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0z"></path>
                        </svg>
                        <span class="ml-2 text-xs absolute -top-1 -right-1 font-medium text-gray-100 group-hover:text-gray-800  rounded-full w-5 h-5 text-center flex justify-center items-center {% if  cart.item_count > 0   %} bg-green-600  {% else %} bg-gray-900 {% endif %}">
                          {{- cart.item_count -}}
                        </span>
                        <span class="sr-only">items in cart, view bag</span>
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </nav>
    </header>
  </div>
</div>

{% schema %}
{
  "name": "Navigational Bar",
  "settings": [
    {
      "type": "text",
      "id": "mobile_menu_title",
      "label": "Title",
      "default": "Menu",
      "info": "This is title of the mobile menu window"
    },
    {
      "type": "link_list",
      "id": "menu",
      "label": "Header Menu",
      "default": "main-menu"
    }
  ]
}
{% endschema %}
